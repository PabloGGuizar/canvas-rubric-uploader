// ==UserScript==
// @name         Canvas Rubric Uploader
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Subir rúbricas a Canvas LMS
// @author       Pablo Gómez, ChatGPT
// @match        *://*.instructure.com/courses/*/rubrics
// @grant        none
// @require      https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js
// ==/UserScript==

(function() {
    'use strict';

    // Añadir un botón a la página de Rúbricas
    const button = document.createElement('button');
    button.innerText = 'Subir Rúbrica';
    button.style.position = 'fixed';
    button.style.top = '10px';
    button.style.right = '10px';
    button.style.zIndex = 1000;
    button.style.padding = '10px';
    button.style.backgroundColor = '#007bff';
    button.style.color = '#fff';
    button.style.border = 'none';
    button.style.borderRadius = '5px';
    button.style.cursor = 'pointer';
    document.body.appendChild(button);

    button.addEventListener('click', () => {
        // Crear un formulario modal para subir la rúbrica
        const modal = document.createElement('div');
        modal.style.position = 'fixed';
        modal.style.top = '50%';
        modal.style.left = '50%';
        modal.style.transform = 'translate(-50%, -50%)';
        modal.style.padding = '20px';
        modal.style.backgroundColor = '#fff';
        modal.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.5)';
        modal.style.zIndex = 1001;

        const storedToken = localStorage.getItem('canvasAccessToken') || '';

        modal.innerHTML = `
            <h2>Subir Rúbrica a Canvas</h2>
            <form id="rubricForm">
                <div>
                    <label for="rubricTitle">Título de la rúbrica:</label>
                    <input id="rubricTitle" type="text" required>
                </div>
                <div>
                    <label for="rubricFile">Archivo de la rúbrica (.csv):</label>
                    <input id="rubricFile" type="file" accept=".csv" required>
                </div>
                <div>
                    <label for="accessToken">Token de acceso:</label>
                    <input id="accessToken" type="password" value="${storedToken}" required>
                </div>
                <div style="color: red; font-size: 12px; margin-top: 10px;">
                    <strong>Advertencia:</strong> El token de acceso se almacenará en el almacenamiento local de tu navegador.
                    Asegúrate de que tu entorno sea seguro y evita compartir este token con terceros.
                </div>
                <button type="submit">Subir</button>
                <button type="button" id="closeModal">Cerrar</button>
            </form>
        `;
        document.body.appendChild(modal);

        document.getElementById('closeModal').addEventListener('click', () => {
            modal.remove();
        });

        document.getElementById('rubricForm').addEventListener('submit', async function(event) {
            event.preventDefault();

            // Obtener los valores del formulario
            const rubricTitle = document.getElementById('rubricTitle').value;
            const rubricFile = document.getElementById('rubricFile').files[0];
            const accessToken = document.getElementById('accessToken').value;

            // Guardar el token en localStorage
            localStorage.setItem('canvasAccessToken', accessToken);

            // Obtener el ID del curso desde la URL
            const courseId = window.location.pathname.split('/')[2];

            // Leer el archivo CSV
            const fileReader = new FileReader();
            fileReader.onload = async function(e) {
                const csvContent = e.target.result;

                // Parsear el contenido del CSV
                const rubricData = parseCSV(csvContent);

                // Crear la rúbrica en Canvas
                await createRubricInCanvas(courseId, rubricTitle, rubricData, accessToken);
            };
            fileReader.readAsText(rubricFile);
        });
    });

    function parseCSV(csvContent) {
        const lines = csvContent.split('\n');
        const criteria = {};

        lines.forEach((line, index) => {
            if (index === 0 || line.trim() === '') return; // Saltar la primera línea (cabecera) y las líneas vacías

            const parts = line.split(',');
            const [criterion, criterion_description] = parts.splice(0, 2);
            const ratings = {};

            for (let i = 0; i < parts.length; i += 2) {
                const rating_description = parts[i];
                const rating_points = parseFloat(parts[i + 1]);
                if (rating_description && !isNaN(rating_points)) { // Verificar que la descripción y los puntos no estén vacíos o sean NaN
                    ratings[(i / 2) + 1] = {
                        description: rating_description,
                        points: rating_points
                    };
                }
            }

            criteria[index] = {
                description: criterion,
                long_description: criterion_description,
                ratings: ratings
            };
        });

        return criteria;
    }

    async function createRubricInCanvas(courseId, rubricTitle, criteria, accessToken) {
        const url = `https://${window.location.hostname}/api/v1/courses/${courseId}/rubrics`;

        const rubricPayload = {
            rubric: {
                title: rubricTitle,
                criteria: criteria
            },
            rubric_association: {
                association_type: 'Course',
                association_id: parseInt(courseId, 10)
            }
        };

        try {
            const response = await axios.post(url, rubricPayload, {
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.status === 200 || response.status === 201) {
                alert('Rúbrica subida con éxito!');
                console.log(response.data);
            } else {
                alert('Error al subir la rúbrica: ' + response.data.errors);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error al subir la rúbrica.');
        }
    }
})();
